package Movie;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Hashtable;
import java.util.Map;
import java.util.Scanner;




public class MovieExam {
	private Scanner scanner = new Scanner(System.in);
	private Connection conn;
	
	public MovieExam() {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			conn = DriverManager.getConnection(
					"jdbc:mysql://localhost:3306/movie"
					,"root" ,"1234");
		}catch(Exception e) {
			e.printStackTrace();
			exit();
		}
	}
	
	public void mainMenu() {
		System.out.println("영화 예매 사이트");
		System.out.println("1. 영화 조회하기");
		System.out.println("2. 영화 예매하기");
		System.out.println("3. 예매 확인하기");
		System.out.println("4. 예매 취소하기");
		System.out.println("5. 관리자 메뉴로 이동");
		System.out.println("6. 관리자 회원가입");
		System.out.print("7. 종료\n");
		System.out.println();
		System.out.print("메뉴를 선택하세요: ");
		
		String menuNo = scanner.nextLine();
		System.out.println();
		
		switch(menuNo) {
		case "1" -> movielist();	//영화 조회
		case "2" -> movieTicket();	//영화 예매
		case "3" -> checkTicket();	//에매 확인
		case "4" -> cancellation();	//예매 취소
		case "5" -> admit(); //login();	//관리자 메뉴로 이동
		case "6" -> member();	//관리자 회원가입
		case "7" -> exit();	
		}
	}
//movieTicket--------------------------------------------------------------------
	public void movieTicket() {
        System.out.println("예매할 영화를 선택해주세요");
        System.out.println("영화 제목: ");
        String movieTitle = scanner.nextLine();

        try {
            String sql = "SELECT title, genre, date_m FROM m_list WHERE title = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, movieTitle);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                Movie movie = new Movie();
                String title = rs.getString("title");
                String genre = rs.getString("genre");
                Date date_m = rs.getDate("date_m");
                movie.setTitle(title);
                movie.setGenre(genre);
                movie.setJoinDate(date_m);

                System.out.println("********************");
                System.out.println("제목: " + movie.getTitle());
                System.out.println("장르: " + movie.getGenre());
                System.out.println("상영일자: " + movie.getJoinDate());

                // 예매 정보 입력 받기
                System.out.println("예매할 사용자 아이디: ");
                String userId = scanner.nextLine();
                System.out.println("예매 날짜 (YYYYMMDD): ");
                String date_t = scanner.nextLine();

                // 예매 정보 저장
                try {
                    sql = "INSERT INTO ticket (userid, date_t) VALUES (?, ?)";
                    pstmt = conn.prepareStatement(sql);     
                    pstmt.setString(1, userId);
                    pstmt.setDate(2, Date.valueOf(date_t));
                    pstmt.executeUpdate();
                    pstmt.close();
                    System.out.println("예매가 완료되었습니다.");
                } catch (SQLException e) {
                    e.printStackTrace();
                    exit();
                }
            } else {
                System.out.println("해당 제목의 영화를 찾을 수 없습니다.");
            }
            rs.close();
            pstmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            exit();
        }
    }
//checkTicket---------------------------------------------------------------
	public void checkTicket() {
	    System.out.println("확인할 사용자 아이디를 입력해주세요: ");
	    String userId = scanner.nextLine();

	    try {
	        String sql = "SELECT m.title, t.date_t FROM ticket t JOIN m_list m ON t.title = m.title WHERE t.userid = ?";
	        PreparedStatement pstmt = conn.prepareStatement(sql);
	        pstmt.setString(1, userId);
	        ResultSet rs = pstmt.executeQuery();

	        System.out.println("--------------------------------------------------");
	        System.out.printf("%-6s%-20s%-20s\n", "티켓번호", "영화 제목", "예매 날짜");
	        System.out.println("--------------------------------------------------");

	        while (rs.next()) {
	            // 티켓번호는 ticket 테이블의 기본키로부터 자동으로 생성되므로 가져오지 않습니다.
	            String title = rs.getString("title");
	            Date date_t = rs.getDate("date_t");
	            System.out.printf("%-6s%-20s%-20s\n", "-", title, date_t);
	        }

	        rs.close();
	        pstmt.close();
	    } catch (SQLException e) {
	        e.printStackTrace();
	        exit();
	    }
	}
//cancellation--------------------------------------------------------------
	public void cancellation() {
				
	}
//login--------------------------------------------------------------------	
	public void login(Movie movie) {
		Map<String, String> map;
		
		map = new Hashtable<>();
		map.put(movie.getId(), movie.getPwd());
		try {
			 while (true) {
		            System.out.println("관리자 로그인");
		            System.out.print("아이디: ");
		            System.out.println();
		            String id = scanner.nextLine();

		            System.out.print("비밀번호: ");
		            String password = scanner.nextLine();
		            System.out.println();

		            if (map.containsKey(id)) {
		                if (map.get(id).equals(password)) {
		                    System.out.println("로그인 되었습니다.");
		                    System.out.println("--------------");
		                    System.out.println();
		                    admit();
		                    break;
		                } else {
		                    System.out.println("비밀번호가 일치하지 않습니다.");
		                }
		            } else {
		                System.out.println("입력하신 아이디가 존재하지 않습니다.");
		            }
		        }
		}catch(Exception e){
			e.printStackTrace();
			exit();
			scanner.close();
		}
			
	}
//join the member----------------------------------------------------
	public void member() {
		Movie movie = new Movie(); 
		System.out.println("[회원가입]"); 
		System.out.print("아이디: "); 
		movie.setId(scanner.nextLine()); 
		System.out.print("비밀번호: ");
		movie.setPwd(scanner.nextLine()); 
		System.out.print("이름: "); 
		movie.setName(scanner.nextLine()); 
		System.out.print("email: "); 
		movie.setEmail(scanner.nextLine());
		
		//보조메뉴 출력 
		System.out.println("-----------------------------------------------------------------------"); 
		System.out.println("가입하시겠습니까?: 1.Ok | 2.Cancel"); 
		System.out.print("메뉴선택: "); 
		
		//nextLine(): 문자 또는 엔터를 치기 전까지의 문장 전체를 입력 받는다.
		//				버퍼에 입력된 문자열을 개행 문자까지 다 가져온다.
		String menuNo = scanner.nextLine();
		//equals(): 두 문자열의 내용을 비교해서 동일한 값을 가지고 있는지 확인
		if(menuNo.equals("1")) {
			//boards 테이블에 게시물 정보 저장
			try {
				
				String sql = "" + // "" + : 그냥 가독성을 위해 쓴다, 공백이 없으면 sql오류날수도 있어 쓴다.
						"INSERT INTO m_movie( id, pwd, name, email, joinDate )"  +
						"VALUES( ?, ?, ?, ?,now())";
				PreparedStatement pstmt = conn.prepareStatement(sql);
				pstmt.setString(1, movie.getId());
				pstmt.setString(2, movie.getPwd());
				pstmt.setString(3, movie.getName());
				pstmt.setString(4, movie.getEmail());
				pstmt.executeUpdate();
				pstmt.close();
			}catch(Exception e) {
				e.printStackTrace();
				exit();
			}
		}
		
		//게시물 목록출력
		mainMenu();
	}
	
//admit------------------------------------------------------------------	
	public void admit() {
	
		System.out.println("1. 영화 목록 보기");
        System.out.println("2. 영화 등록하기");
        System.out.println("3. 영화 삭제하기");
        System.out.println("4. 비밀번호 인증");
        System.out.println("5. 메인 메뉴로 이동");
        System.out.println("6. 종료");
        System.out.println();
        System.out.println("메뉴를 선택하세요.");
        
        String menuNo = scanner.nextLine();
		System.out.println();
		try {
			String sql = "SELECT title, genre, date_m FROM m_list WHERE title=? ";
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, menuNo);
			ResultSet rs = pstmt.executeQuery();
			switch(menuNo) {
			case "1" -> movielist();	//영화목록
			case "2" -> movieAdd();	//영화 등록
			case "3" -> {
                System.out.print("삭제할 영화의 제목을 입력하세요: ");
                String movieTitle = scanner.nextLine();
                Movie movie = new Movie();
                movie.setTitle(movieTitle);
                movieDelete(movie);
            }	//영화 삭제
			//case "4" -> pwCertified();	//비밀번호 인증
			case "5" -> mainMenu();	//메인메뉴 이동
			case "6" -> exit();
			}
			rs.close();
			pstmt.close();
		}catch(Exception e) {
			e.printStackTrace();
			exit();
		}
	}
//영화 리스트-------------------------------------------------------------------------	
	public void movielist() {
		System.out.println();
		System.out.println("[영화 목록]");
		System.out.println("----------------------------------------");
		System.out.printf("%-6s%-12s%-40s\n", "제목","장르","상영일자");
		System.out.println("----------------------------------------");
		
		try {
			String sql = "SELECT title, genre, date_m FROM m_list order by date_m desc";
			PreparedStatement pstmt = conn.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			
			while(rs.next()) {
				Movie movie = new Movie();
				
				String tilte = rs.getString("title");
				String genre = rs.getString("genre");
				Date joinDate = rs.getDate("date_m");
				
				
				movie.setTitle(tilte);
				movie.setGenre(genre);
				movie.setJoinDate(joinDate);
				System.out.printf("%-6s%-12s%-40s\n", movie.getTitle(), movie.getGenre(), movie.getJoinDate());
			}
			rs.close();
			pstmt.close();
		}catch(SQLException e) {
			e.printStackTrace();
			exit();
		}
		mainMenu();
		
	}
//movie add------------------------------------------------------------------------		
	public void movieAdd() {
		Movie movie = new Movie();
		System.out.println("[영화 등록]");
		System.out.println("제목: ");
		movie.setTitle(scanner.nextLine());
		System.out.println("장르: ");
		movie.setGenre(scanner.nextLine());
		
		System.out.println("----------------------------");
		System.out.println("등록하시겠습니까? 1.Ok | 2.Cancel");
		System.out.println("선택: ");
		
		String menuNo = scanner.nextLine();
		
		if(menuNo.equals("1")) {
			try {
				String sql = "" + 
						"INSERT INTO m_list(date_m, title, genre)" +
							"VALUES(now(), ?, ?)";
				PreparedStatement pstmt = conn.prepareStatement(sql);
				pstmt.setString(1, movie.getTitle());
				pstmt.setString(2, movie.getGenre());
				pstmt.executeUpdate();
				pstmt.close();
			}catch(Exception e) {}
		}
		//메인메뉴로 돌아가기
		admit();
	}
//movie delete--------------------------------------------------------------------
	public void movieDelete(Movie movie) {
        // m_list 테이블에서 게시물 정보 삭제
        try {
            String sql = "DELETE FROM m_list WHERE title=?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, movie.getTitle());
            pstmt.executeUpdate();
            pstmt.close();
        } catch (Exception e) {
            e.printStackTrace();
            exit();
        }
        admit();
    }
//pwCertified----------------------------------------------------------------------
		
//exit--------------------------------------------------------------------------	
	public void exit() {
		if(conn != null) {
			try {
				conn.close();
			}catch(SQLException e) {}
		}
		System.out.println("**종료하기**");
		System.exit(0);
	}
	
	public static void main(String[] args) {
		MovieExam movieExam = new MovieExam();
		movieExam.mainMenu();
		
	}
}

미완성
