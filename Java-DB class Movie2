2차 수정

package Movie;

/*
 주석 모음 
Class.forName은 클래스를 로드해주는 역할, com.mysql.cj.jdbc.Driver란 클래스를 로드해주는 것이다. 이후 이 클래스는 java.sql에 있는 DriverManager가 이용하게 된다.
PrepareStatement: 컴파일된 sql문을 객체로 생성하는 명령어
executeQuery: DB에서 가져와서 조회하는 명령어
executeUpdate:  INSERT, UPDATE, DELETE와 같은 DML(Data Manipulation Language)에서 실행 결과로 영향을 받은 레코드 수를 반환한다.
				반환 타입이 int이므로, 쿼리 실행 결과로 반환되는 값을 int로 받아와야 한다.
				행의 개수를 반환하기 때문에  rs를 사용할 필요 없다.
				그냥 실행
SQLException: 예외처리 명령어
printStackTrace: 예외 발생시 정보 출력 명령어
nextLine: 문자 또는 엔터를 치기 전까지의 문장 전체를 입력 받는다, 버퍼에 입력된 문자열을 개행 문자까지 다 가져온다.
equals: 두 문자열의 내용을 비교해서 동일한 값을 가지고 있는지 확인
String sql = ' "" + ' 쓰는이유 : 그냥 가독성을 위해 쓴다, 공백이 없으면 sql오류날수도 있어 쓴다.
try-catch : 예외를 처리하기 위한 구문
 */
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Hashtable;
import java.util.Map;
import java.util.Scanner;

import bulletinboard.Member;



//DB연결-------------------------------------------------------------
public class MovieExam {
	private Scanner scanner = new Scanner(System.in);
	private Connection conn;
	
	public MovieExam() {
		try {
			//Class.forName은 클래스를 로드해주는 역할, com.mysql.cj.jdbc.Driver란 클래스를 로드해주는 것이다. 
			//이후 이 클래스는 java.sql에 있는 DriverManager가 이용하게 된다.
			Class.forName("com.mysql.cj.jdbc.Driver");	
			conn = DriverManager.getConnection(
					"jdbc:mysql://localhost:3306/movie"
					,"root" ,"1234");
		}catch(Exception e) {
			e.printStackTrace();
			exit();
		}
	}
//mainMenu------------------------------------------------------------------------------	
	public void mainMenu() {
		System.out.println("영화 예매 사이트");
		System.out.println("1. 영화 조회하기");
		System.out.println("2. 영화 예매하기");
		System.out.println("3. 예매 확인하기");
		System.out.println("4. 예매 취소하기");
		System.out.println("5. 관리자 메뉴로 이동");
		System.out.print("6. 종료\n");
		System.out.println();
		System.out.print("메뉴를 선택하세요: ");
		
		String menuNo = scanner.nextLine();
		System.out.println();
		
		switch(menuNo) {
		case "1" -> movielist();	//영화 조회
		case "2" -> movieTicket();	//영화 예매
		case "3" -> checkTicket();	//에매 확인
		case "4" -> {
            System.out.println("아이디 입력: ");
            String movieuserid = scanner.nextLine();
            Movie movie = new Movie();
            movie.setUserid(movieuserid);
            cancellation(movie);
        }		//예매 취소
		case "5" -> admit();	//관리자 메뉴로 이동
		case "6" -> exit();	
		}
	}
//movieTicket--------------영화 예매-------------------------------------------------------
	public void movieTicket() {
        System.out.println("예매할 영화를 선택해주세요");
        System.out.println("영화 제목: ");
        String movieTitle = scanner.nextLine();

        try {
        	//sql 부분
            String sql = "SELECT title, genre, date_m FROM m_list WHERE title = ?";
            //sql문을 연결
            PreparedStatement pstmt = conn.prepareStatement(sql);
            //?에 값을 넣어준다
            pstmt.setString(1, movieTitle);
            //DB에 가져와서 조회하는값을 rs에 넣어준다.
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
            	//get, set 사용
                Movie movie = new Movie();
                String title = rs.getString("title");
                String genre = rs.getString("genre");
                Date date_m = rs.getDate("date_m");
                movie.setTitle(title);
                movie.setGenre(genre);
                movie.setJoinDate(date_m);

                System.out.println("********************");
                System.out.println("제목: " + movie.getTitle());
                System.out.println("장르: " + movie.getGenre());
                System.out.println("상영일자: " + movie.getJoinDate());

                // 예매 정보 입력 받기
                System.out.println("예매할 사용자 아이디: ");
                String userId = scanner.nextLine();
                

                // 예매 정보 저장
          
                try {
                	//sql insert into 로 값 넣기 
                    sql = "INSERT INTO ticket (userid, title, date_t) VALUES (?, ?, ?)";
                    pstmt = conn.prepareStatement(sql);
                    //values ?에 값 넣기
                    pstmt.setString(1, userId);
                    pstmt.setString(2, title);
                    pstmt.setDate(3, date_m);
                    //조회한값 실행
                    pstmt.executeUpdate();
                    pstmt.close();
                    System.out.println("예매가 완료되었습니다.");
                } catch (SQLException e) {
                    e.printStackTrace();
                    exit();
                }
            } else {
                System.out.println("해당 제목의 영화를 찾을 수 없습니다.");
            }
            //먼저 실행한것을 제일 마지막에 닫기
            rs.close();
            pstmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            exit();
        }
        mainMenu();
    }
//checkTicket--------------예매 확인-------------------------------------------------------
	public void checkTicket() {
	    System.out.println("확인할 사용자 아이디를 입력해주세요: ");
	    String userId = scanner.nextLine();
	    
	    try {
	    	//join 사용 ticket, m_list 약자로 t, m 씀
	        String sql = "SELECT ticketnumber, m.title, t.date_t FROM ticket t JOIN m_list m ON t.title = m.title WHERE t.userid = ?";
	        PreparedStatement pstmt = conn.prepareStatement(sql);
	        pstmt.setString(1, userId);
	        ResultSet rs = pstmt.executeQuery();

	        System.out.println("--------------------------------------------------");
	        System.out.printf("%-6s%-20s%-20s\n", "티켓번호", "영화 제목", "예매 날짜");
	        System.out.println("--------------------------------------------------");

	        while (rs.next()) {
	        	int ticketnumber = rs.getInt("ticketnumber");
	            String title = rs.getString("title");
	            Date date_t = rs.getDate("date_t");
	            System.out.printf("%-8s%-18s%-20s\n", ticketnumber, title, date_t);
	        }

	        rs.close();
	        pstmt.close();
	    } catch (SQLException e) {
	        e.printStackTrace();
	        exit();
	    }
	    mainMenu();
	}
//cancellation-------------예매 취소-------------------------------------------------------
	public void cancellation(Movie movie) {
		// m_list 테이블에서 게시물 정보 삭제
        try {
            String sql = "DELETE FROM ticket WHERE userid=?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, movie.getUserid());
            pstmt.executeUpdate();
            pstmt.close();
            System.out.println("해당 아이디의 예매가 취소되었습니다.");
        } catch (Exception e) {
            e.printStackTrace();
            exit();
        }
        mainMenu();
	}
//login----------------미완성--------------------------------------------------------------	
	public void login(Movie movie) {
		Map<String, String> map;
		
		map = new Hashtable<>();
		map.put(movie.getId(), movie.getPwd());
		try {
			 while (true) {
		            System.out.println("관리자 로그인");
		            System.out.print("아이디: ");
		            System.out.println();
		            String id = scanner.nextLine();

		            System.out.print("비밀번호: ");
		            String password = scanner.nextLine();
		            System.out.println();

		            if (map.containsKey(id)) {
		                if (map.get(id).equals(password)) {
		                    System.out.println("로그인 되었습니다.");
		                    System.out.println("--------------");
		                    System.out.println();
		                    admit();
		                    break;
		                } else {
		                    System.out.println("비밀번호가 일치하지 않습니다.");
		                }
		            } else {
		                System.out.println("입력하신 아이디가 존재하지 않습니다.");
		            }
		        }
		}catch(Exception e){
			e.printStackTrace();
			exit();
			scanner.close();
		}
			
	}
//join the member--------------------회원가입-----------------------------------------------
	public void member() {
		Movie movie = new Movie(); 
		System.out.println("[회원가입]"); 
		System.out.print("아이디: "); 
		movie.setId(scanner.nextLine()); 
		System.out.print("비밀번호: ");
		movie.setPwd(scanner.nextLine()); 
		System.out.print("이름: "); 
		movie.setName(scanner.nextLine()); 
		System.out.print("email: "); 
		movie.setEmail(scanner.nextLine());
		
		//보조메뉴 출력 
		System.out.println("-----------------------------------------------------------------------"); 
		System.out.println("가입하시겠습니까?: 1.Ok | 2.Cancel"); 
		System.out.print("메뉴선택: "); 
		
		//nextLine(): 문자 또는 엔터를 치기 전까지의 문장 전체를 입력 받는다.
		//				버퍼에 입력된 문자열을 개행 문자까지 다 가져온다.
		String menuNo = scanner.nextLine();
		//equals(): 두 문자열의 내용을 비교해서 동일한 값을 가지고 있는지 확인
		if(menuNo.equals("1")) {
			try {
				//member 테이블에 값 저장
				String sql = "" + // "" + : 그냥 가독성을 위해 쓴다, 공백이 없으면 sql오류날수도 있어 쓴다.
						"INSERT INTO member( id, pwd, name, email, joinDate )"  +
						"VALUES( ?, ?, ?, ?,now())";
				PreparedStatement pstmt = conn.prepareStatement(sql);
				pstmt.setString(1, movie.getId());
				pstmt.setString(2, movie.getPwd());
				pstmt.setString(3, movie.getName());
				pstmt.setString(4, movie.getEmail());
				pstmt.executeUpdate();
				pstmt.close();
			}catch(Exception e) {
				e.printStackTrace();
				exit();
			}
		}
		
		mainMenu();
	}	
//admit----------------------------관리자---------------------------------------------------
	public void admit() {
	
		System.out.println("1. 영화 목록 보기");
        System.out.println("2. 영화 등록하기");
        System.out.println("3. 영화 삭제하기");
        System.out.println("4. 회원 보기 & 수정");
        System.out.println("4. 메인 메뉴로 이동");
        System.out.println("5. 종료");
        System.out.println();
        System.out.println("메뉴를 선택하세요.");
        
        String menuNo = scanner.nextLine();
		System.out.println();
		try {
			String sql = "SELECT title, genre, date_m FROM m_list WHERE title=? ";
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, menuNo);
			ResultSet rs = pstmt.executeQuery();
			switch(menuNo) {
			case "1" -> movielist();	//영화목록
			case "2" -> movieAdd();	//영화 등록
			case "3" -> {
                System.out.print("삭제할 영화의 제목을 입력하세요: ");
                String movieTitle = scanner.nextLine();
                Movie movie = new Movie();
                movie.setTitle(movieTitle);
                movieDelete(movie);
            }	//영화 삭제
			case "4" -> memberlist(); //회원 보기 및 수정
			case "5" -> mainMenu();	//메인메뉴 이동
			case "6" -> exit();
			}
			rs.close();
			pstmt.close();
		}catch(Exception e) {
			e.printStackTrace();
			exit();
		}
	}
//영화 리스트-------------------------영화 목록-------------------------------------------------	
	public void movielist() {
		System.out.println();
		System.out.println("[영화 목록]");
		System.out.println("----------------------------------------");
		System.out.printf("%-6s%-12s%-40s\n", "제목","장르","상영일자");
		System.out.println("----------------------------------------");
		
		try {
			String sql = "SELECT title, genre, date_m FROM m_list order by date_m desc";
			PreparedStatement pstmt = conn.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			
			while(rs.next()) {
				Movie movie = new Movie();
				
				String tilte = rs.getString("title");
				String genre = rs.getString("genre");
				Date joinDate = rs.getDate("date_m");
				
				
				movie.setTitle(tilte);
				movie.setGenre(genre);
				movie.setJoinDate(joinDate);
				System.out.printf("%-6s%-12s%-40s\n", movie.getTitle(), movie.getGenre(), movie.getJoinDate());
			}
			rs.close();
			pstmt.close();
		}catch(SQLException e) {
			e.printStackTrace();
			exit();
		}
		mainMenu();
		
	}
//movie add------------------------영화 등록-------------------------------------------------		
	public void movieAdd() {
		Movie movie = new Movie();
		System.out.println("[영화 등록]");
		System.out.println("제목: ");
		movie.setTitle(scanner.nextLine());
		System.out.println("장르: ");
		movie.setGenre(scanner.nextLine());
		
		System.out.println("----------------------------");
		System.out.println("등록하시겠습니까? 1.Ok | 2.Cancel");
		System.out.println("선택: ");
		
		String menuNo = scanner.nextLine();
		
		if(menuNo.equals("1")) {
			try {
				String sql = "" + 
						"INSERT INTO m_list(date_m, title, genre)" +
							"VALUES(now(), ?, ?)";
				PreparedStatement pstmt = conn.prepareStatement(sql);
				pstmt.setString(1, movie.getTitle());
				pstmt.setString(2, movie.getGenre());
				pstmt.executeUpdate();
				pstmt.close();
			}catch(Exception e) {}
		}
		//메인메뉴로 돌아가기
		admit();
	}
//movie delete---------------------영화 목록 삭제----------------------------------------------
	public void movieDelete(Movie movie) {
        // m_list 테이블에서 게시물 정보 삭제
        try {
            String sql = "DELETE FROM m_list WHERE title=?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, movie.getTitle());
            pstmt.executeUpdate();
            pstmt.close();
        } catch (Exception e) {
            e.printStackTrace();
            exit();
        }
        admit();
    }
//memberlist-----------------------회원 목록-------------------------------------------------
	public void memberlist() {
		//타이틀 및 컬럼명 출력
		//printf : %=각각의 문자열 시작, s = 문자열(string)형식으로 출력, - = 왼쪽으로 정렬
		System.out.println();
		System.out.println("[회원 목록]");
		System.out.println("--------------------------------------------------");
		System.out.printf("%-6s%-12s%-16s%-40s\n", "아이디","이름","email","가입일자");
		System.out.println("--------------------------------------------------");
		
		//boads 테이블에서 게시물 정보를 가져와서 출력하기
		
		try {
			String sql = "SELECT id, name, email, joinDate FROM member order by joinDate desc";
			//PrepareStatement: 선처리 방식으로 미리 컴파일된 SQL문을 가지고 있다가 동적으로 칼럼값을 채워 질의문을 수행할 수 있어 효율적인 SQL문을 구사할 수 있다.
			//				:컴파일된 sql문을 객체로 생성하는 명령어
			PreparedStatement pstmt = conn.prepareStatement(sql);
			/*
			 executeQuery(): select 문과 같은 쿼리문을 실행할 떄 사용
			 				뭐리를 실행하고, 결과를 ResultSet객체로 반환, 반환된 ResultSet객체를 통해 결과를 가져올수있다.
			 				db에서 가져와서 조회하는 명령어
			 */
			ResultSet rs = pstmt.executeQuery();
			
			//next() : 공백을 기준으로 한 단어 또는 한 문자씩 입력 받는다.
			//			버퍼에 입력된 문자나 문자열에서 공백 전까지의 단어를 읽는다.
			//while : 문장을 반복해서 수행해야 할 경우 사용
			while(rs.next()) {
				Member member = new Member();
				String id = rs.getString("id");
				String name = rs.getString("name");
				String email = rs.getString("email");
				Date joinDate = rs.getDate("joinDate");
				//member값 저장
				member.setId(id);
				member.setName(name);
				member.setEmail(email);
				member.setJoinDate(joinDate);
				//member값 불러온다
				System.out.printf("%-6s%-12s%-16s%-40s \n", member.getId(), member.getName(), member.getEmail(), member.getJoinDate());
			}
			rs.close();
			pstmt.close();
		}catch(SQLException e) {
			e.printStackTrace();
			exit();
		}
		membermain();
	}
//membermain-----------------------회원 메인-------------------------------------------------
	public void membermain() {
		System.out.println();
		System.out.println("-------------------------------------------------");
		System.out.println("메인메뉴: 1.회원가입 | 2.회원보기 | 3.회원삭제 | 4.관리자로 돌아가기 | 5.프로그램종료");
		System.out.println("메뉴선택: ");
		//nextLine(): 문자 또는 엔터를 치기 전까지의 문장 전체를 입력 받는다.
		//				버퍼에 입력된 문자열을 개행 문자까지 다 가져온다.
		String menuNo = scanner.nextLine();
		System.out.println();
	
		switch(menuNo) {
			case "1" -> membership();
			case "2" -> Changing();
			case "3" -> clear();
			case "4" -> admit();
			case "5" -> exit();
		}
	}
//join the membership--------------회원 가입-------------------------------------------------
	public void membership() {
		//입력 받기 
		Movie movie = new Movie(); 
		System.out.println("[회원가입]"); 
		System.out.print("아이디: "); 
		movie.setId(scanner.nextLine()); 
		System.out.print("비밀번호: ");
		movie.setPwd(scanner.nextLine()); 
		System.out.print("이름: "); 
		movie.setName(scanner.nextLine()); 
		System.out.print("email: "); 
		movie.setEmail(scanner.nextLine());
		
		//보조메뉴 출력 
		System.out.println("-----------------------------------------------------------------------"); 
		System.out.println("가입하시겠습니까?: 1.Ok | 2.Cancel"); 
		System.out.print("메뉴선택: "); 
		
		String menuNo = scanner.nextLine();
		if(menuNo.equals("1")) {
			try {
				
				String sql = "" + // "" + : 그냥 가독성을 위해 쓴다, 공백이 없으면 sql오류날수도 있어 쓴다.
						"INSERT INTO t_member( id, pwd, name, email, joinDate )"  +
						"VALUES( ?, ?, ?, ?,now())";
				PreparedStatement pstmt = conn.prepareStatement(sql);
				pstmt.setString(1, movie.getId());
				pstmt.setString(2, movie.getPwd());
				pstmt.setString(3, movie.getName());
				pstmt.setString(4, movie.getEmail());
				pstmt.executeUpdate();
				pstmt.close();
				}catch(Exception e) {
					e.printStackTrace();
					exit();
				}
				memberlist();
			}
		}
//Changing-------------------------회원 정보 수정 & 삭제----------------------------------------
	public void Changing() {
		//입력 받기
		System.out.println("[회원 보기]");
		System.out.print("아이디: ");
		String _id = scanner.nextLine();
		
		//boards 테이블에서 해당 게시물을 가져와 출력
		try {
			String sql = "SELECT id, name, email, joinDate FROM member WHERE id=? "; 
			PreparedStatement pstmt = conn.prepareStatement(sql); 
			pstmt.setString(1, _id); 
			ResultSet rs = pstmt.executeQuery();
		
			if(rs.next()) { Movie movie = new Movie(); 
				String id= rs.getString("id");
				String name = rs.getString("name"); 
				String email = rs.getString("email"); 
				Date joinDate = rs.getDate("joinDate"); 
				movie.setId(id); 
				movie.setName(name); 
				movie.setEmail(email); 
				movie.setJoinDate(joinDate); 
				System.out.println("#############"); 
				System.out.println("아이디: " + movie.getId()); 
				System.out.println("이름: " + movie.getName()); 
				System.out.println("email: " + movie.getEmail()); 
				System.out.println("가입날짜: " + movie.getJoinDate()); 
				//보조메뉴 출력 
				System.out.println("-------------------------------------------------------------------"); 
				System.out.println("회원수정: 1.Update | 2.Delete | 3.List"); 
				System.out.print("메뉴선택: "); 
				String menuNo = scanner.nextLine(); 
				System.out.println(); 

				if(menuNo.equals("1")) { update(movie); } 
				else if(menuNo.equals("2")) { delete(movie); } 
			}
			rs.close();
			pstmt.close();	//pstmt가 먼저 열려서 제일 나중에 닫아준다.
		}catch(Exception e) {
			e.printStackTrace();
			exit();
		}
	
		//게시물 목록 출력
		memberlist();
	}
//updat----------------------------회원 정보 업뎃---------------------------------------------	
	public void update(Movie movie) {
		//수정 내용 입력 받기
		System.out.println("[수정 내용 입력]"); 
		System.out.print("이름: "); 
		movie.setName(scanner.nextLine()); 
		System.out.print("비밀번호: "); 
		movie.setPwd(scanner.nextLine()); 
		System.out.print("email: "); 
		movie.setEmail(scanner.nextLine());
		
		//보조메뉴 출력
		System.out.println("-------------------------------------------------------------------"); 
		System.out.println("수정하시겠습니까?: 1.Ok | 2.Cancel"); 
		System.out.print("메뉴선택: "); 
		String menuNo = scanner.nextLine();
		
		if(menuNo.equals("1")) {
			//boards 테이블에서 게시물 정보 수정
			 try {
				 String sql = "" +
						 "UPDATE t_member SET pwd=?, name=?, email=? WHERE id=?"; 
						 PreparedStatement pstmt = conn.prepareStatement(sql); 
						 pstmt.setString(1, movie.getPwd()); 
						 pstmt.setString(2, movie.getName()); 
						 pstmt.setString(3, movie.getEmail()); 
						 pstmt.setString(4, movie.getId()); 
						 pstmt.executeUpdate(); 
						 pstmt.close(); 
			 }catch(Exception e) {
				 e.printStackTrace();
				 exit();
			 }
		}
		//게시물 목록 출력
		memberlist();
	}
//delete---------------------------회원 정보 삭제---------------------------------------------
	public void delete(Movie movie) {
		//boards 테이블에 게시물 정보 삭제
		try {
			String sql = "DELETE FROM t_member WHERE id=?"; 
			PreparedStatement pstmt = conn.prepareStatement(sql); 
			pstmt.setString(1, movie.getId()); 
			pstmt.executeUpdate(); 
			pstmt.close(); 
		}catch(Exception e) {
			e.printStackTrace();
			exit();
		}
		//게시물 목록 출력
		memberlist();
	}
//clear----------------------------회원 전체 삭제----------------------------------------------
	public void clear() {
		System.out.println("[회원전체삭제]"); 
		System.out.println("-------------------------------------------------------------------"); 
		System.out.println("회원전체를 삭제하시겠습니까?: 1.Ok | 2.Cancel"); 
		System.out.print("메뉴선택: "); 
		String menuNo = scanner.nextLine();
		if(menuNo.equals("1")) {
			//boards 테이블에 게시물 정보 전체 삭제
			try {
				/*
				TURNCAT는 숫자 데이터를 반올림, 버림하는 숫자를 다듬을때 '버림'을 실행하는 함수
				테이블의 모든 행(ROW)의 데이터 삭제
				행 자체도 삭제
				삭제된 행이 사용하고 있었던 저장공간을 반납
				테이블의 인덱스(index)도 삭제됨
				*/
				String sql = "TRUNCATE TABLE member"; 
				PreparedStatement pstmt = conn.prepareStatement(sql); 
				pstmt.executeUpdate(); 
				pstmt.close(); 
			}catch(Exception e) {
				e.printStackTrace();
				exit();
			}
		}
		//게시물 목록 출력
		membership();
	}
//exit-----------------------------종료-----------------------------------------------------
	public void exit() {
		if(conn != null) {
			try {
				conn.close();
			}catch(SQLException e) {}
		}
		System.out.println("**종료하기**");
		System.exit(0);
	}
//main-----------------------------메인 실행-------------------------------------------------	
	public static void main(String[] args) {
		MovieExam movieExam = new MovieExam();
		movieExam.mainMenu();
		
	}
}
